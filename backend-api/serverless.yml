service:
  name: serverless-social-media-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  environment:
    TOPIC_TABLE: Topic-${self:provider.stage}
    TOPIC_CREATED_AT_INDEX: TopicsCreatedAtIndex
    USER_TABLE: Users-${self:provider.stage}
    USER_DISPLAY_NAME_INDEX: UserDisplayNameIndex
    FEED_TABLE: Feed-${self:provider.stage}
    FEED_CREATED_AT_INDEX: FeedCreatedAtIndex
    IMAGES_S3_BUCKET: social-images-${self:provider.stage}
    IMAGES_THUMBNAIL_S3_BUCKET: social-image-thumbnails-${self:provider.stage}
    VIDEOS_S3_BUCKET: social-videos-${self:provider.stage}
    VIDEOS_THUMBNAIL_S3_BUCKET: social-video-thumbnails-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  webpack:
    webpackConfig: ./webpack.config.js 
    includeModules: true


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTopics:
    handler: src/lambda/http/getTopics.handler
    events:
      - http:
          method: get
          path: topics
          cors: true
          # reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPIC_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPIC_TABLE}/index/${self:provider.environment.TOPIC_CREATED_AT_INDEX}

  CreateTopic:
    handler: src/lambda/http/createTopic.handler
    events:
      - http:
          method: post
          path: topics
          cors: true
          # reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPIC_TABLE}

  CreateUser:
    handler: src/lambda/http/createUser.handler
    events:
      - http:
          method: post
          path: user
          cors: true
          # reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    events:
      - http:
          method: post
          path: topics
          cors: true
          # reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}


resources:
  Resources:
    TopicTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TOPIC_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TOPIC_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: displayName
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: displayName
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_DISPLAY_NAME_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: displayName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

    VideosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VIDEOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    VideosBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*'
        Bucket: !Ref VideosBucket